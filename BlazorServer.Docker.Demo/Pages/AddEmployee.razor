@page "/Employees/add"
@inject IDbContextFactory<EmployeeManagerDbContext> ContextFactory

<PageTitle>Add Employee</PageTitle>

<h3>Add Employee</h3>

@if (Employee is not null)
{
    <EditForm Model="@Employee" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="firstname" class="form-label">First Name</label>
            <InputText id="firstname" class="form-control" @bind-Value="Employee.FirstName"></InputText>
            <ValidationMessage For="()=> Employee.FirstName" />
        </div>
        <div class="mb-3">
            <label for="lastname" class="form-label">Last Name</label>
            <InputText id="lastname" class="form-control" @bind-Value="Employee.LastName"></InputText>
            <ValidationMessage For="()=> Employee.LastName" />
        </div>

        <div class="mb-3">
            <label for="department" class="form-label">Department</label>
            <InputSelect id="department" class="form-select" @bind-Value="Employee.DepartmentId">
                @if (Departments is not null)
                {
                    @foreach (var department in Departments)
                    {
                        <option value="@department.Id"> @department.Name</option>
                    }

                }
            </InputSelect>

        </div>
        <div class="mb-3">
            <label for="isdeveloper" class="form-label">Is Developer ?</label>
            <InputCheckbox id="isdeveloper" class="form-check-input" @bind-Value="Employee.IsDeveloper"></InputCheckbox>
        </div>
        <button type="submit" class="btn btn-primary" disabled="@IsBusy">Add</button>

    </EditForm>

    @if (SuccessMessage is not null)
    {
        <br />
        <div class="alert alert-success">@SuccessMessage</div>
    }

    @if (ErrorMessage is not null)
    {
        <br />
        <div class="alert alert-danger">@ErrorMessage</div>
    }

}

@code {

    public Employee? Employee { get; set; }
    public Department[]? Departments { get; set; }

    private string? SuccessMessage { get; set; }

    private string? ErrorMessage { get; set; }

    private bool IsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = ContextFactory.CreateDbContext();
        Departments = await context.Departments.OrderBy(dep => dep.Name).ToArrayAsync();
        Employee = new Employee()
            {
                DepartmentId = Departments.FirstOrDefault()?.Id
            };

    }
    private async Task HandleValidSubmit()
    {
        if (IsBusy)
        {
            return;
        }

        IsBusy = true;

        try
        {
            if (Employee is not null)
            {
                using var context = ContextFactory.CreateDbContext();

                context.Employees.Add(Employee);
                await context.SaveChangesAsync();

                SuccessMessage = $"Employee {Employee.FirstName} {Employee.LastName} was added successfully.";
                ErrorMessage = null;

                // New Employee for next creation
                Employee = new()
                    {
                        DepartmentId = Employee.DepartmentId
                    };
            }
        }
        catch (Exception ex)
        {
            SuccessMessage = null;
            ErrorMessage = $"Error while adding employee: {ex.Message}";
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void HandleInvalidSubmit()
    {
        SuccessMessage = null;
        ErrorMessage = null;
    }

}
